buildscript {
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.20.0'
        classpath 'com.google.gms:google-services:4.3.3'
        classpath 'com.stanfy.spoon:spoon-gradle-plugin:1.2.2'
        classpath 'io.fabric.tools:gradle:1.26.1'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'project-report'
apply plugin: 'spoon'

def getSignInformation = { keystorePath, keystorePropertyPath ->
    def keyStore = file(keystorePath)
    if (!keyStore.exists()) {
        logger.error("Keystore file not found, path=${keyStore.absolutePath}")
        return
    }
    def propertiesFile = file(keystorePropertyPath)
    if (!propertiesFile.exists()) {
        logger.error("Keystore properties file not found, path=${propertiesFile.absolutePath}")
        return
    }
    Properties properties = new Properties()
    properties.load(new FileInputStream(propertiesFile))
    return [
            storeFile    : keyStore,
            storePassword: properties["store_password"],
            keyAlias     : properties["key_alias"],
            keyPassword  : properties["key_password"]
    ]
}

android {
    compileSdkVersion 29
    buildToolsVersion '27.0.3'
    defaultConfig {
        applicationId "com.xmartlabs.template"
        minSdkVersion 21
        multiDexEnabled true
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "${applicationId}.TestRunner"
    }
    signingConfigs {
        //noinspection GroovyMissingReturnStatement
        debug {
            def signInformation = getSignInformation("debug.keystore", "keystore.properties")
            if (signInformation != null) {
                storeFile signInformation.storeFile
                storePassword signInformation.storePassword
                keyAlias signInformation.keyAlias
                keyPassword signInformation.keyPassword
            }
        }
        //noinspection GroovyMissingReturnStatement
        release {
            def signInformation = getSignInformation("release.keystore", "keystore.properties")
            if (signInformation != null) {
                storeFile signInformation.storeFile
                storePassword signInformation.storePassword
                keyAlias signInformation.keyAlias
                keyPassword signInformation.keyPassword
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // The sign process should be enabled to release
            // signingConfig signingConfigs.release
        }
    }
    dataBinding {
        enabled = true
    }
    flavorDimensions 'version', 'env'
    productFlavors {
        //noinspection GroovyMissingReturnStatement
        production {
            dimension 'env'
        }

        staging {
            dimension 'env'
            applicationIdSuffix '.staging'
        }

        lollipopAndAbove {
            dimension 'version'
            minSdkVersion 21 // For faster multidex compilation
        }

        allVersions {
            dimension 'version'
        }
    }
    //noinspection GroovyMissingReturnStatement
    lintOptions {
        warning 'InvalidPackage'
    }
    packagingOptions {
        exclude '.readme'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDirs += sharedTestDir
        }
        androidTest {
            java.srcDirs += sharedTestDir
        }
    }
    androidExtensions {
        experimental = true
    }
    kotlinOptions {
        freeCompilerArgs = ["-Xallow-result-return-type"]
    }
}
final APPCOMPAT_VERSION = '1.1.0'
final ANDROID_SUPPORT_TEST_VERSION = '1.1.0'
final ANDROID_SUPPORT_VERSION = '27.1.1'
final ANDROID_MATERIAL_VERSION = '1.2.0-alpha03'
final ANDROID_TEST_RULES = '1.2.0'
final ANNOTATION_VERSION = '1.1.0'
final BIGBANG_VERSION = '03b4b4d73c'
final CONSTRAINT_LAYOUT_VERSION = '1.1.3'
final DAGGER_VERSION = '2.16'
final DART_VERSION = '2.0.3'
final DATABINDING_VERSION = '3.1.4'
final ESPRESSO_VERSION = '3.1.0'
final ESPRESSO_INTENT_VERSION = '3.2.0'
final FRAGMENTARGS_VERSION = '3.0.2'
final GSON_VERSION = '2.8.5'
final JUNIT_VERSION = '4.12'
final KOTLIN_VERSION = '1.2.0'
final LEGACY_SUPPORT_VERSION = '1.0.0'
final LIFECYCLE_VERSION = '2.1.0'
final LOCALDATE_BACKPORT_VERSION = '1.1.0'
final MATERIAL_DIALOGS_VERSION = '0.9.6.0'
final MATERIAL_VERSION = '1.0.0'
final MOCKITO_VERSION = '2.16.0'
final MULTIDEX_VERSION = '2.0.1'
final OK_HTTP_2_CURL_VERSION = '0.4.5'
final OK_HTTP_IDLING_RESOURCE_VERSION = '1.0.0'
final OK_HTTP_VERSION = '3.10.0'
final OKIO_VERSION = '1.14.1'
final PARCELER_VERSION = '1.1.10'
final PICASSO_VERSION = '8c16e8564e'
final REST_MOCK = '0.3.1'
final RETROFIT_VERSION = '2.4.0'
final ROOM_VERSION = '2.2.3'
final ROOM_COMPILER_VERSION = '2.2.3'
final RXANDROID_VERSION = '2.0.2'
final RXJAVA_VERSION = '2.1.14'
final RXLIFECYCLE_VERSION = '3.1.0'
final STETHO_VERSION = '1.5.0'
final TIMBER_VERSION = '4.7.1'
final TRACEUR_VERSION = '273cc7d582'

dependencies {
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    androidTestImplementation "com.github.xmartlabs.bigbang:instrumental-test:${BIGBANG_VERSION}"
    androidTestImplementation "androidx.appcompat:appcompat:${APPCOMPAT_VERSION}"
    androidTestImplementation "com.google.android.material:material:${MATERIAL_VERSION}"
    androidTestImplementation "androidx.legacy:legacy-support-v13:${LEGACY_SUPPORT_VERSION}"

    androidTestImplementation "androidx.annotation:annotation:${ANNOTATION_VERSION}"
    androidTestImplementation "androidx.test:rules:${ANDROID_TEST_RULES}"
    androidTestImplementation('androidx.test.ext:junit:1.1.1') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation('androidx.test.espresso:espresso-contrib:3.1.0') {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude module: 'recyclerview-v7'
    }
    androidTestImplementation("androidx.test.espresso:espresso-core:${ESPRESSO_VERSION}") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation "androidx.test.espresso:espresso-intents:${ESPRESSO_INTENT_VERSION}"

    androidTestImplementation "androidx.annotation:annotation:${ANNOTATION_VERSION}"
    androidTestImplementation "com.github.andrzejchm.RESTMock:android:${REST_MOCK}"
    androidTestImplementation "com.jakewharton.espresso:okhttp3-idling-resource:${OK_HTTP_IDLING_RESOURCE_VERSION}"
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:${OK_HTTP_VERSION}"
    androidTestImplementation "com.squareup.okhttp3:okhttp:${OK_HTTP_VERSION}"
    androidTestImplementation "com.squareup.okio:okio:${OKIO_VERSION}"

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.constraintlayout:constraintlayout:${CONSTRAINT_LAYOUT_VERSION}"
    implementation "androidx.lifecycle:lifecycle-extensions:${LIFECYCLE_VERSION}"
    implementation "androidx.lifecycle:lifecycle-livedata:${LIFECYCLE_VERSION}"
    implementation "androidx.lifecycle:lifecycle-reactivestreams:${LIFECYCLE_VERSION}"
    implementation "androidx.lifecycle:lifecycle-runtime:${LIFECYCLE_VERSION}"
    implementation "androidx.lifecycle:lifecycle-viewmodel:${LIFECYCLE_VERSION}"
    implementation "androidx.room:room-runtime:${ROOM_VERSION}"
    implementation "com.afollestad.material-dialogs:core:${MATERIAL_DIALOGS_VERSION}"
    implementation "androidx.appcompat:appcompat:${APPCOMPAT_VERSION}"
    implementation "com.google.android.material:material:${MATERIAL_VERSION}"
    implementation "androidx.multidex:multidex:${MULTIDEX_VERSION}"
    implementation "androidx.legacy:legacy-support-v13:${LEGACY_SUPPORT_VERSION}"
    implementation("com.crashlytics.sdk.android:crashlytics:2.9.3@aar") {
        transitive = true
    }
    implementation "com.f2prateek.dart:dart:${DART_VERSION}"
    implementation "com.f2prateek.dart:henson:${DART_VERSION}"
    implementation "com.facebook.stetho:stetho-okhttp3:${STETHO_VERSION}"
    implementation "com.facebook.stetho:stetho:${STETHO_VERSION}"
    implementation "com.github.mrmike:Ok2Curl:${OK_HTTP_2_CURL_VERSION}"
    implementation "com.github.square.picasso:picasso:${PICASSO_VERSION}"
    implementation "com.github.xmartlabs.bigbang:core:${BIGBANG_VERSION}"
    implementation "com.github.xmartlabs.bigbang:log-crashlytics:${BIGBANG_VERSION}"
    implementation "com.github.xmartlabs.bigbang:retrofit:${BIGBANG_VERSION}"
    implementation "com.github.xmartlabs.bigbang:mvvm:${BIGBANG_VERSION}"
    implementation "com.github.xmartlabs.bigbang:ui:${BIGBANG_VERSION}"
    implementation "com.github.xmartlabs:Traceur:${TRACEUR_VERSION}"
    implementation "com.google.android.material:material:${ANDROID_MATERIAL_VERSION}"
    implementation "com.google.code.gson:gson:${GSON_VERSION}"
    implementation "com.google.dagger:dagger-android-support:${DAGGER_VERSION}"
    implementation "com.google.dagger:dagger:${DAGGER_VERSION}"
    implementation "com.hannesdorfmann.fragmentargs:annotation:${FRAGMENTARGS_VERSION}"
    implementation "com.jakewharton.threetenabp:threetenabp:${LOCALDATE_BACKPORT_VERSION}"
    implementation "com.jakewharton.timber:timber:${TIMBER_VERSION}"
    implementation "com.squareup.okhttp3:logging-interceptor:${OK_HTTP_VERSION}"
    implementation "com.squareup.okhttp3:okhttp:${OK_HTTP_VERSION}"
    implementation "com.squareup.okio:okio:${OKIO_VERSION}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${RETROFIT_VERSION}"
    implementation "com.squareup.retrofit2:converter-gson:${RETROFIT_VERSION}"
    implementation "com.squareup.retrofit2:retrofit:${RETROFIT_VERSION}"
    implementation "com.trello.rxlifecycle3:rxlifecycle-components:${RXLIFECYCLE_VERSION}"
    implementation "com.trello.rxlifecycle3:rxlifecycle-android-lifecycle-kotlin:${RXLIFECYCLE_VERSION}"
    implementation "io.reactivex.rxjava2:rxandroid:${RXANDROID_VERSION}"
    implementation "io.reactivex.rxjava2:rxjava:${RXJAVA_VERSION}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${KOTLIN_VERSION}"

    kapt "androidx.lifecycle:lifecycle-compiler:${LIFECYCLE_VERSION}"
    kapt "androidx.room:room-compiler:${ROOM_COMPILER_VERSION}"
    kapt "com.f2prateek.dart:dart-processor:${DART_VERSION}"
    kapt "com.f2prateek.dart:henson-processor:${DART_VERSION}"
    kapt "com.google.dagger:dagger-android-processor:${DAGGER_VERSION}"
    kapt "com.google.dagger:dagger-compiler:${DAGGER_VERSION}"
    kapt "com.hannesdorfmann.fragmentargs:processor:${FRAGMENTARGS_VERSION}"

    kaptAndroidTest "com.google.dagger:dagger-android-processor:${DAGGER_VERSION}"
    kaptAndroidTest "com.google.dagger:dagger-compiler:${DAGGER_VERSION}"

    kaptTest "com.google.dagger:dagger-android-processor:${DAGGER_VERSION}"
    kaptTest "com.google.dagger:dagger-compiler:${DAGGER_VERSION}"

    implementation 'javax.annotation:jsr250-api:1.0'

    testImplementation "androidx.annotation:annotation:${ANDROID_SUPPORT_TEST_VERSION}"
    testImplementation "com.github.andrzejchm.RESTMock:android:${REST_MOCK}"
    testImplementation "com.squareup.okhttp3:okhttp:${OK_HTTP_VERSION}"
    testImplementation "com.squareup.okio:okio:${OKIO_VERSION}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${OK_HTTP_VERSION}"
    testImplementation "junit:junit:${JUNIT_VERSION}"
    testImplementation "org.mockito:mockito-core:${MOCKITO_VERSION}"
}

spoon {
    debug = true
    baseOutputDir = file("$projectDir/build/reports/spoon")
}
